package com.nisovin.magicspells.spells.buff;

import java.util.HashSet;
import java.util.List;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;

import com.nisovin.magicspells.spells.BuffSpell;
import com.nisovin.magicspells.util.MagicConfig;

public class InvulnerabilitySpell extends BuffSpell {

	private HashSet<DamageCause> damageCauses;
	
	private HashSet<String> gods;
	
	public InvulnerabilitySpell(MagicConfig config, String spellName) {
		super(config, spellName);
		
		damageCauses = new HashSet<DamageCause>();
		List<String> causes = getConfigStringList("damage-causes", null);
		if (causes != null) {
			for (String s : causes) {
				s = s.replace(" ","_").replace("-","_").toUpperCase();
				DamageCause cause = DamageCause.valueOf(s);
				if (cause != null) {
					damageCauses.add(cause);
				}
			}
		}
		
		gods = new HashSet<String>();
	}

	@Override
	public PostCastAction castSpell(Player player, SpellCastState state, float power, String[] args) {
		if (gods.contains(player.getName()) && !isExpired(player)) {
			turnOff(player);
			return PostCastAction.ALREADY_HANDLED;
		} else if (state == SpellCastState.NORMAL) {
			gods.add(player.getName());
			startSpellDuration(player);
		}
		return PostCastAction.HANDLE_NORMALLY;
	}

	@EventHandler
	public void onEntityDamage(EntityDamageEvent event) {
		if (event.isCancelled()) return;
		if (event.getEntity() instanceof Player && (damageCauses.size() == 0 || damageCauses.contains(event.getCause()))) {
			Player player = (Player)event.getEntity();
			if (gods.contains(player.getName())) {
				if (isExpired(player)) {
					turnOff(player);
				} else {
					addUse(player);
					boolean ok = chargeUseCost(player);
					if (ok) {
						event.setCancelled(true);
					}
				}
			}
		}
	}
	
	@Override
	public void turnOff(Player player) {
		if (gods.contains(player.getName())) {
			super.turnOff(player);
			gods.remove(player.getName());
			sendMessage(player, strFade);
		}
	}
	
	@Override
	protected void turnOff() {
		gods.clear();
	}

}
